import logging, argparse
from numpy import int32, around, sqrt
from numpy.random import normal

from vdif import VDIFFrame

def gen_rand_data(length, bits, scale=1.):
    data = (2**bits) * normal(scale=scale, size=length)
    return around(data).astype(int32)

if __name__ == "__main__":

    # Parse the user's command line arguments
    parser = argparse.ArgumentParser(description='Simulate VDIF data from multiple stations')
    parser.add_argument('-v', dest='verbose', action='store_true', help='display debugging logs')
    parser.add_argument('-s', '--total-stations', dest='total_stations', metavar='TOTAL_STATIONS', 
                        type=int, default=1, help='Simulate data generated by TOTAL_STATIONS (default 1)')
    parser.add_argument('-n', '--frames', dest='frames', metavar='FRAMES',
                        type=int, default=1, help='Generate FRAMES of data (default 1)')
    parser.add_argument('-b', '--bits-per-sample', dest='bits_per_sample', metavar='SAMPLE_BITS',
                        type=int, default=32, help='Set the sample bitwidth to SAMPLE_BITS (default=2, max=32)')
    parser.add_argument('-c', '--correlated-level', dest='corr_level', metavar='CORR_LEVEL',
                        type=float, default=1.0, help='Set the level of the correlated component (default 1.0)')
    args = parser.parse_args()

    # Generate our correlated component
    corr_level = min(sqrt(args.corr_level), 1.0)
    uncorr_level = sqrt(1.0 - corr_level**2)
    samples_per_frame = (32 / args.bits_per_sample) * (1024 * 2)
    corr_component = corr_level * gen_rand_data(samples_per_frame, args.bits_per_sample)

    for station in range(args.total_stations):
        filename = "capt{0}.vdif".format(station)
        with open(filename, 'wb') as file_:
            for frame_n in range(args.frames):
                vdif_frame = VDIFFrame()
                vdif_frame.station_id = station
                vdif_frame.frame_length = 1028
                vdif_frame.bits_per_sample = args.bits_per_sample
                uncorr_component = uncorr_level * gen_rand_data(samples_per_frame, args.bits_per_sample)
                vdif_frame.data = (corr_component + uncorr_component).astype(int32)
                vdif_frame.data_frame = frame_n
                file_.write(str(vdif_frame))
